# 사용 라이브러리 : zipfile, xml.etree.ElementTree as ET, pandas, mysql.connector, sqlalchemy's import create_engine, PIL's import Image
# base64, io's import BytesIO, io, re, random, mysql.connector's IntegrityError

# develop environment : Aanaconda's Jupyter notebook python 3.10.11

# 사용 API : Vertual AI's Jupyter Notebook, GCP, Apache Beam, Cloud Storage, Big Query, VM Instance, Data Flow

# 코드 이용시 주의사항 : Aanaconda's Jupyter NoteBook으로 작업을 하여서, 파일 다운로드 path나 API's Key 경로는 local에서 진행시 각 체제의 맞게 변경 바람!!
========================================================================================================================================================================
========================================================================================================================================================================

prices = []
# 100개의 가격을 랜덤하게 생성하여 리스트에 추가
for _ in range(100):
    price = random.randint(1000, 3000)  # 1000에서 3000 사이의 랜덤한 정수
    price = price // 100 * 100  # 100원 단위로 만들기
    prices.append(price)


# 각 서버의 MYSQL정보 기재 바람
db_config = {
    "host": "",
    "user": "",
    "password": "",
    "database": "",
    'connection_timeout': 999999999 # SQL 연결 시간 최대 설정
}

img_path_list = []
temp_list = []

download_path = "C:/Users/User/capstone_project/이미지/train/images"  # 원하는 경로로 변경
basic_file = 'C:/Users/User/Desktop/2학기/캡스톤 과제/cap_project/Store_Item_Datasets.zip'

zip_file_path = basic_file
# 압축 파일 열기
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    # 압축 파일 내의 모든 파일 및 폴더 목록 가져오기
    file_list = zip_ref.namelist()

    # 폴더 이름과 해당 폴더에서 txt 파일 내용을 저장할 딕셔너리 생성
    folder_txt_dict = {}
    folder_image_list = []
    for item in file_list:
        # '/' 문자를 기준으로 파일 경로를 분할하여 첫 번째 요소를 폴더 이름으로 추출
        folder_name = item.split('/')[-1].encode('cp437').decode('cp949')
        if item.endswith('.txt'):
            if folder_name not in folder_txt_dict:
                folder_txt_dict[folder_name] = []
            # txt 파일 내용 읽어오기 (적절한 인코딩 사용)
            try:
                txt_data = zip_ref.read(item).decode('utf-8')  # 파일 내용을 UTF-8로 디코딩
            except UnicodeDecodeError:
                # 인코딩이 다르다면 다른 인코딩으로 시도
                txt_data = zip_ref.read(item).decode('cp949')  # 예: cp949 인코딩 사용
            folder_txt_dict[folder_name].append(txt_data)
        if re.match(r'.*_(0|00)_s_(2|1).jpg$', item):
            image_data = zip_ref.read(item)
            download_file_path_s1 = f"{download_path}/{item.split('/')[-1].replace('_s_2.jpg', '_s_1.jpg')}"
            with open(download_file_path_s1, 'wb') as image_file_s1:
                image_file_s1.write(image_data)
                if f"{download_path}/{item.split('/')[-1].replace('_s_2.jpg', '_s_1.jpg')}" not in folder_image_list:
                    folder_image_list.append(f"{download_path}/{item.split('/')[-1].replace('_s_2.jpg', '_s_1.jpg')}")
                    
        if item.endswith('30140_00_s_3.jpg'):
            image_data = zip_ref.read(item)
            download_file_path_s1 = f"{download_path}/{item.split('/')[-1].replace('_s_2.jpg', '_s_1.jpg')}"
            with open(download_file_path_s1, 'wb') as image_file_s1:
                image_file_s1.write(image_data)
                if f"{download_path}/{item.split('/')[-1]}" not in folder_image_list:
                    folder_image_list.append(f"{download_path}/{item.split('/')[-1]}")

# 각 폴더의 txt 파일 내용을 Pandas 데이터프레임으로 읽어오기
dataframes = {}

for folder_name, txt_list in folder_txt_dict.items():
    # txt_list를 하나의 문자열로 결합
    if folder_name.endswith("클래스 번호.txt"):
        txt_combined = '\r'.join(txt_list)
        temp_list.append(txt_combined.split('\r\n'))

temp_list = [item for sublist in temp_list for item in sublist if item.strip() != '']
things_dict = {}
thing_num = []

for thing in temp_list:
    temp = thing.split(':')
    name = temp[0]
    thing_num.append(name.split('_')[0])
    name = name.split('_')[-1]
    class_num = temp[-1].strip()
    things_dict[int(class_num)] = name

img_data = []
# 데이터 리스트 2를 순회하면서

for num in thing_num:
    for img in folder_image_list:
        if num in img:
            img_data.append(img)
data = {
     "id" : list(things_dict.keys()),
     "name" : list(things_dict.values()),
     "num" : thing_num,
     "img_path" : img_data,
     "price" : prices
}
df = pd.DataFrame(data)


